{
  "language": "Solidity",
  "sources": {
    "src/Wallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract Wallet is Ownable {\n    event Execute(address indexed target, bytes data, bytes response);\n\n    error ExecutionFailed(uint256 index);\n\n    function call(address target, bytes memory data) external payable onlyOwner returns (bytes memory response) {\n        bool success;\n        (success, response) = target.delegatecall(data);\n\n        emit Execute(target, data, response);\n\n        if (!success) {\n            // If there is return data, the call reverted with a reason or a custom error.\n            if (response.length > 0) {\n                assembly {\n                    let returndata_size := mload(response)\n                    revert(add(32, response), returndata_size)\n                }\n            } else {\n                revert ExecutionFailed(0);\n            }\n        }\n    }\n\n    function multicall(address[] memory targets, bytes[] memory datas)\n        external\n        payable\n        onlyOwner\n        returns (bytes[] memory responses)\n    {\n        uint256 length = datas.length;\n        responses = new bytes[](length);\n\n        for (uint256 i; i < length; i++) {\n            address target = targets[i];\n            bytes memory data = datas[i];\n\n            (bool success, bytes memory response) = target.delegatecall(data);\n\n            emit Execute(target, data, response);\n\n            if (!success) {\n                // If there is return data, the call reverted with a reason or a custom error.\n                if (response.length > 0) {\n                    assembly {\n                        let returndata_size := mload(response)\n                        revert(add(32, response), returndata_size)\n                    }\n                } else {\n                    revert ExecutionFailed(i);\n                }\n            }\n\n            responses[i] = response;\n        }\n    }\n\n    receive() external payable {}\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "@euler/=lib/euler-contracts/",
      "@forge-std/=lib/forge-std/src/",
      "@openzeppelin/=lib/openzeppelin-contracts/",
      "@solmate/=lib/solmate/src/",
      "@uniswapV2/=lib/v2-periphery/",
      "@uniswapV3/=lib/v3-periphery/",
      "ds-test/=lib/solmate/lib/ds-test/src/",
      "euler-contracts/=lib/euler-contracts/contracts/",
      "forge-std/=lib/forge-std/src/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/",
      "solmate/=lib/solmate/src/",
      "src/=src/",
      "v2-periphery/=lib/v2-periphery/contracts/",
      "v3-periphery/=lib/v3-periphery/contracts/",
      "weird-erc20/=lib/solmate/lib/weird-erc20/src/",
      "src/=src/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "evmVersion": "london",
    "libraries": {}
  }
}